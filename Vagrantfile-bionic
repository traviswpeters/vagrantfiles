# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # A few different VMs...
  config.vm.box = "ubuntu/focal64"
  # config.vm.box = "hashicorp/bionic64"
  #config.vm.box = "generic/ubuntu1804"
  #config.vm.box = "generic/trusty32"
  # config.vm.box = "generic/fedora28"

  # X-forwarding
  # Thanks, https://computingforgeeks.com/how-to-enable-and-use-ssh-x11-forwarding-on-vagrant-instances/
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  config.vm.hostname = "vbox"

  config.vm.provider 'virtualbox' do |vb|
    vb.gui = false
    vb.check_guest_additions = false
    vb.customize ['modifyvm', :id, '--name', 'DevBox']
    vb.customize ['modifyvm', :id, '--memory', 2048]
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
  end

  # Don't check for updates on every 'vagrant up'
  config.vm.box_check_update = false

  # here, I sync the current directory (".") on my host machine with the VM (which can be located at "/home/vagrant/path/to/stuff")
  config.vm.synced_folder ".", "/home/vagrant/projects"

  # Use "File Provisioner" to upload a file or directory from the host machine to the guest machine.
  config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"

  # Permissioned provisioning with a shell script.
  config.vm.provision "shell", inline: <<-SHELL
    echo 'Doing privileged provisioning...'
    whoami

    export DEBIAN_FRONTEND=noninteractive

    apt-get update
    apt-get upgrade -y
    #apt-get install autoconf -y

    # make sure we have our manuals...
    #apt-get install man -y
    #apt-get install manpages-dev -y
    #apt-get install manpages-posix -y
    #apt-get install manpages-posix-dev -y

    # some useful installs
    #apt-get install vim -y  # editor
    #apt-get install git -y  # DVCS
    #apt-get install tree -y # enhanced commandline output

    # installs for OS assignments
    #apt-get install gcc -y          # compiler
    #apt-get install gcc-multilib -y # multi architecture and 32-/64- bit support
    #apt-get install gdb -y          # debugger
    #apt-get install valgrind -y     # memory debugger
    #apt-get install xauth -y        # x11
    #apt-get install x11-apps -y     # e.g., xeyes, xclock
    #apt-get install imagemagick -y  # image tools
    #apt-get install ruby            # ruby and friends for scripts (e.g., grading scripts)
    #gem install bundler -v 2.0.1

    # Need this stuff...?
    # apt-get install xutils-dev
    # apt-get --reinstall install libc6 libc6-dev

    ### other (silly) installs...

    # install TLDR (community driven man pages w/ practical examples)
    #sudo apt-get install nodejs npm
    #sudo npm install -g tldr
    #tldr --update

  SHELL

  # Non-root provisioning with a shell script.
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo 'Now doing non-root provisioning...'
    whoami

    # surpress login banner w/ motd
    touch ~/.hushlogin

  SHELL

  config.vm.provision "shell", inline: "echo All done! Now run: vagrant ssh"
end

### HOOKS ###

# # add hook in bashrc to grab updates to cs460 customizations and apply them.
# if ! grep -q 'cs460customizations' ~/.bashrc; then
#   cat >> ~/.bashrc <<EOL
  
#   # fetch the most up-to-date cs460 customizations
#   curl -sS https://raw.githubusercontent.com/traviswpeters/cs460-code/master/cs460customizations -o .cs460customizations
            
#   # source our customizations
#   if [ -f ~/.cs460customizations ]; then
#       source ~/.cs460customizations
#   fi
  
#   EOL
#       fi

### TIMEZONE ###
# vagrant plugin install vagrant-vbguest
# timedatectl list-timezones | grep America
# sudo timedatectl set-timezone America/Denver
# timedatectl

### CORE DUMPS ###
# make core dumps easier to work with...
# credit: https://jvns.ca/blog/2018/04/28/debugging-a-segfault-on-linux/
#
# - check the current core dump limit setting:
#   ulimit -c
#
# - set the core dump limit setting:
#   ulimit -c unlimited
#
# - check the current core dump pattern:
#   `cat /proc/sys/kernel/core_pattern`
#
# - set core dump pattern
#   sudo sysctl -w kernel.core_pattern=/tmp/core-%e.%p.%h.%t
#   sudo sysctl -w kernel.core_pattern=/home/vagrant/core
#   ###sudo sysctl -w kernel.core_pattern=~/core  <<< can't use '~' --- must use absolute path
#
# - kill the current process (a.k.a. generate a core dump to test your pattern):
#   `kill -s SIGABRT $$`
